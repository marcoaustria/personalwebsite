{"version":3,"sources":["components/Homepage.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Homepage","Fragment","className","href","src","alt","id","width","height","frameborder","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"mPA6FeA,G,0BAvFS,WACtB,OACE,kBAAC,IAAMC,SAAP,KAEE,yBAAKC,UAAU,kCACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,0BAEb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,QACb,uBAAGC,KAAK,cACN,yBAAKC,IAAI,2BAA2BC,IAAI,QAI9C,yBAAKH,UAAU,uBACb,yBAAKA,UAAU,8DAEb,yBAAKA,UAAU,+BACb,6BACE,wBAAII,GAAG,cACL,wBAAIJ,UAAU,kBACZ,8CAGF,4BACE,uBAAGC,KAAK,cAAR,SAEF,4BACE,uBAAGA,KAAK,iBAAR,aAEF,4BACE,uBAAGA,KAAK,aAAR,SAEF,4BACE,uBAAGA,KAAK,KAAR,QACA,wBAAID,UAAU,WACZ,4BACE,uBAAGC,KAAK,aAAR,SAEF,4BACE,uBAAGA,KAAK,qBAAR,iBAEF,4BACE,uBAAGA,KAAK,iBAAR,cAIN,4BACE,uBAAGA,KAAK,gBAAR,YAGF,wBAAID,UAAU,8BACZ,uBACEC,KAAK,mCACLD,UAAU,OAFZ,cAaZ,yBAAKA,UAAU,UACb,yBAAKA,UAAU,uCAMzB,4BACEK,MAAM,MACNC,OAAO,MACPJ,IAAI,+DACJK,YAAY,UCvDPC,MAff,WACE,OACE,yBAAKR,UAAU,OACX,kBAAC,EAAD,MACD,kBAAC,IAAD,KACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWb,QCT3Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.d2ab08d8.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport logo from \"../logo.svg\";\nimport \"../assets/css/style.css\";\nimport Cards from \"./Cards\";\nimport ReactNotepad from \"react-notepad\";\n\nexport const Homepage = () => {\n  return (\n    <React.Fragment>\n      {/* Header Start */}\n      <div className=\"header-area header-transparent\">\n        <div className=\"main-header \">\n          <div className=\"header-bottom  header-sticky\">\n            <div className=\"container-fluid\">\n              <div className=\"row align-items-center\">\n                {/* Logo */}\n                <div className=\"col-xl-2 col-lg-2\">\n                  <div className=\"logo\">\n                    <a href=\"index.html\">\n                      <img src=\"assets/img/logo/logo.png\" alt=\"\" />\n                    </a>\n                  </div>\n                </div>\n                <div className=\"col-xl-10 col-lg-10\">\n                  <div className=\"menu-wrapper d-flex align-items-center justify-content-end\">\n                    {/* Main-menu */}\n                    <div className=\"main-menu d-none d-lg-block\">\n                      <nav>\n                        <ul id=\"navigation\">\n                          <li className=\"section-tittle\">\n                            <h2>Marco Austria</h2>\n                          </li>\n\n                          <li>\n                            <a href=\"index.html\">Home</a>\n                          </li>\n                          <li>\n                            <a href=\"packages.html\">Packages</a>\n                          </li>\n                          <li>\n                            <a href=\"help.html\">Help</a>\n                          </li>\n                          <li>\n                            <a href=\"#\">Blog</a>\n                            <ul className=\"submenu\">\n                              <li>\n                                <a href=\"blog.html\">Blog</a>\n                              </li>\n                              <li>\n                                <a href=\"blog_details.html\">Blog Details</a>\n                              </li>\n                              <li>\n                                <a href=\"elements.html\">Element</a>\n                              </li>\n                            </ul>\n                          </li>\n                          <li>\n                            <a href=\"contact.html\">Contact</a>\n                          </li>\n                          {/* Button */}\n                          <li className=\"button-header margin-left \">\n                            <a\n                              href=\"https://ufl.zoom.us/j/2492570197\"\n                              className=\"btn\"\n                            >\n                              Zoom\n                            </a>\n                          </li>\n                        </ul>\n                      </nav>\n                    </div>\n                  </div>\n                </div>\n                {/* Mobile Menu */}\n                <div className=\"col-12\">\n                  <div className=\"mobile_menu d-block d-lg-none\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <iframe\n          width=\"560\"\n          height=\"315\"\n          src=\"https://www.youtube.com/embed/prHFVUaL_bU?start=1&controls=0\"\n          frameborder=\"0\"\n        />\n      </div>\n      {/* Header End */}\n    </React.Fragment>\n  );\n};\n\nexport default Homepage;\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n\n  Link\n} from \"react-router-dom\";\nimport Navbar from 'react-bootstrap/Navbar'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Homepage from \"./components/Homepage\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Homepage/>\n       <Router>\n          <Switch>\n              <Route exact path='/' component={Homepage} />\n              {/* <Route path='/contact' component={Contact} />\n              <Route path='/about' component={About} /> */}\n          </Switch>\n       </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}